

mod block;


use image::GenericImageView;

use {HashBytes, Preproc};

pub trait HashAlg<B: HashBytes>: Default {
    fn hash_image<I: GenericImageView>(preproc: &Preproc, image: &I, hash_size: u32) -> B;
}


/// The Mean hashing algorithm.
///
/// The image is converted to grayscale, scaled down to `hash_size x hash_size`,
/// the mean pixel value is taken, and then the hash bits are generated by comparing
/// the pixels of the descaled image to the mean.
///
/// This is the most basic hash algorithm supported, resistant only to changes in
/// resolution, aspect ratio, and overall brightness.
///
/// Further Reading:
/// http://www.hackerfactor.com/blog/?/archives/432-Looks-Like-It.html
#[derive(Debug, Default)]
pub struct Mean;

impl<B: HashBytes> HashAlg<B> for Mean {
    fn hash_image<I: GenericImageView>(preproc: &Preproc, image: &I, hash_size: u32) -> B {
        let
    }
}
